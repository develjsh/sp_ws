package com.will.herb.member.controller;

import javax.servlet.http.HttpSession;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.context.annotation.SessionScope;

import com.will.herb.member.model.MemberService;
import com.will.herb.member.model.MemberVO;

@Controller
@RequestMapping("/member")
public class MemberController {
	private static final Logger logger = LoggerFactory.getLogger(MemberController.class);
	
	@Autowired
	private MemberService memberService;
	
	@RequestMapping("/agreement.do")
	public String agreement() {
		logger.info("agreement 화면 보여주기");
		
		return "member/agreement";
	}
	
	@RequestMapping("/register.do")
	public void register() {
		logger.info("회원가입 페이지 보여주기");
		
		//void로 하면 requestMapping에 적혀 있는것을 알아서 가져와 return 값을 입력해준다. 대신, requestMapping에 다른 글이 적혀있으면 안된다
		//return "member/register";
	}
	
	@RequestMapping(value = "/memberWrite.do")
	public String register_post(@ModelAttribute MemberVO memberVo, @RequestParam String email3, Model model) {
		//1
		logger.info("회원가입 입력, vo={}", memberVo);
		if(memberVo.getHp2()==null || memberVo.getHp2().isEmpty() || memberVo.getHp3()==null || memberVo.getHp3().isEmpty()) {
			memberVo.setHp1("");
			memberVo.setHp2("");
			memberVo.setHp3("");
		}
		
		if(memberVo.getEmail1()==null || memberVo.getEmail1().isEmpty()) {
			memberVo.setEmail1("");
			memberVo.setEmail2("");
		}else {
			if(memberVo.getEmail2().equals("etc")) {
				memberVo.setEmail2(email3);
			}
		}
		
		
		//2
		int cnt = memberService.insertMember(memberVo);
		logger.info("회원가입 결과, cnt={}", cnt);
		String msg="회원 가입 실패 했습니다", url="/member/register.do";
		if(cnt>0) {
			msg="회원 가입 성공 했습니다";
			url="/index.do";
		}
		//3
		model.addAttribute("msg",msg);
		model.addAttribute("url",url);
		
		//4
		
		return "common/message";
	}
	
	@RequestMapping("/checkUserid.do")
	public String checkUserid(@RequestParam String userid, Model model) {
		logger.info("아이디 중복확인, 파라미터 userid={}", userid);
		
		int result=0;
		if(userid!=null && !userid.isEmpty()) {
			result=memberService.duplicateId(userid);
		}
		logger.info("아이디 중복 확인 결과, result={}", result);
		
		model.addAttribute("result", result);
		model.addAttribute("EXIST_ID", MemberService.EXIST_ID);
		model.addAttribute("NON_EXIST_ID", MemberService.NON_EXIST_ID);
		
		return "member/checkUserid";
	}
	
	@RequestMapping(value = "/memberEdit.do", method = RequestMethod.GET)
	public String memberEdit_get(HttpSession session, Model model) {
		logger.info("회원정보 수정 화면 보여주기");
		
		String userid = (String)session.getAttribute("userid");
		logger.info("회원정보 수정 아이디 값, userid={}",userid);
		
		if(userid==null || userid.isEmpty()) {
			model.addAttribute("msg", "먼저 로그인하세요");
			model.addAttribute("url", "/login/login.do");
			return "common/message";
		}
		
		MemberVO vo=memberService.selectMember(userid);
		logger.info("memberVo 입력 받은 값, vo={}", vo);
		
		
		model.addAttribute("vo", vo);
		
		return "member/memberEdit";
	}
	
	@RequestMapping(value = "/memberEdit.do", method = RequestMethod.POST)
	public String memberEdit_post(@ModelAttribute MemberVO vo, @RequestParam(required = false) String email3,
			HttpSession session, Model model) {
		String userid = (String)session.getAttribute("userid");
		vo.setUserid(userid);
		logger.info("회원 정보 수정, 파라미터 vo={}", vo);
		
		if(userid==null || userid.isEmpty()) {
			model.addAttribute("msg", "먼저 로그인하세요");
			model.addAttribute("url", "/login/login.do");
			return "common/message";
		}
		
		
		if(vo.getHp2()==null || vo.getHp2().isEmpty() || vo.getHp3()==null || vo.getHp3().isEmpty()) {
			vo.setHp1("");
			vo.setHp2("");
			vo.setHp3("");
		}
		
		if(vo.getEmail1()==null || vo.getEmail1().isEmpty()) {
			vo.setEmail1("");
			vo.setEmail2("");
		}else {
			if(vo.getEmail2().equals("etc")) {
				vo.setEmail2(email3);
			}
		}
		
		int cnt = memberService.updateMember(vo);
		logger.info("회원 정보 수정 결과, 파라미터 vo={}", vo);
		String msg="회원 수정 실패 하셨습니다", url="/member/memberEdit.do";
		
		if(cnt>0) {
			msg="회원 정보 수정 성고하셨습니다";
			url="/index.do";
		}
		
		return "common/message";
	}
}

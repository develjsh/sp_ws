package com.will.herb.member.model;

import org.apache.ibatis.session.SqlSession;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

@Repository
public class MemberDAOMybatis {
	@Autowired
	private SqlSession sqlSession;
	
	private String namespace="config.mybatis.mapper.oracle.member.";
	
	
	public int insertMember(MemberVO vo) {
		return sqlSession.insert(namespace + "memberInsert", vo);
	}
	/*
	public int duplicateId(String userid) throws SQLException {
		Connection con=null;
		PreparedStatement ps=null;
		ResultSet rs=null;
		
		int result=0;
		try {
			//1,2
			con=pool.getConnection();
			
			//3
			String sql="select count(*) from member" + 
					" where userid=?";
			ps=con.prepareStatement(sql);
			ps.setString(1, userid);
			
			rs=ps.executeQuery();			
			if(rs.next()) {
				int count=rs.getInt(1);
				if(count>0) {  //해당 아이디가 이미 존재
					result=MemberService.EXIST_ID;
				}else {
					result=MemberService.NON_EXIST_ID;					
				}
			}
			
			System.out.println("아이디 중복확인 결과 result="+result);
			return result;
		}finally {
			pool.dbClose(con, ps, rs);
		}
	}
	
	public int loginCheck(String userid, String pwd) throws SQLException {
		Connection con=null;
		PreparedStatement ps=null;
		ResultSet rs=null;
		int result=0;
		try {
			//1,2
			con=pool.getConnection();
			
			//3
			String sql="select pwd from member" + 
					" where userid=? and outdate is null";
			ps=con.prepareStatement(sql);
			ps.setString(1, userid);
			
			rs=ps.executeQuery();
			if(rs.next()) {
				String dbPwd=rs.getString(1);
				if(dbPwd.equals(pwd)) { //로그인 성공
					result=MemberService.LOGIN_OK;
				}else { //비밀번호 불일치
					result=MemberService.PWD_DISAGREE;
				}
			}else {  //해당 아이디가 없는 경우
				result=MemberService.ID_NONE;
			}
			
			System.out.println("로그인 처리 결과 result="+result
					+", 매개변수 userid="+userid+", pwd="+pwd);
			
			return result;
		}finally {
			pool.dbClose(con, ps, rs);
		}
	}
	
	public MemberVO selectMember(String userid) throws SQLException {
		Connection con=null;
		PreparedStatement ps=null;
		ResultSet rs=null;
		
		MemberVO vo = new MemberVO();
		try {
			//1,2
			con=pool.getConnection();
			
			//3
			String sql="select * from member" + 
					" where userid=?";
			ps=con.prepareStatement(sql);
			ps.setString(1, userid);
			
			rs=ps.executeQuery();
			if(rs.next()) {
				String pwd=rs.getString("pwd");
				String name=rs.getString("name");
				String email=rs.getString("email");
				String hp=rs.getString("hp");
				String zipcode=rs.getString("zipcode");
				String address=rs.getString("address");
				String addressDetail=rs.getString("addressDetail");
				int no=rs.getInt("no");
				int mileage=rs.getInt("mileage");
				Timestamp regdate=rs.getTimestamp("regdate");
				Timestamp outdate=rs.getTimestamp("outdate");
				
				vo.setAddress(address);
				vo.setAddressDetail(addressDetail);
				vo.setEmail(email);
				vo.setHp(hp);
				vo.setMileage(mileage);
				vo.setName(name);
				vo.setNo(no);
				vo.setOutdate(outdate);
				vo.setPwd(pwd);
				vo.setRegdate(regdate);
				vo.setUserid(userid);
				vo.setZipcode(zipcode);
			}
			
			System.out.println("회원정보 조회 결과 vo="+vo
					+", 매개변수 userid="+userid);
			
			return vo;
		}finally {
			pool.dbClose(con, ps, rs);
		}
	}
	
	public int updateMember(MemberVO vo) throws SQLException {
		Connection con=null;
		PreparedStatement ps=null;
		
		try {
			con=pool.getConnection();
			
			String sql="update member"
					+ " set email=?,hp=?, zipcode=?, "
					+ " address=?, addressDetail=?" 
					+ " where userid=?";
			ps=con.prepareStatement(sql);
			ps.setString(1, vo.getEmail());
			ps.setString(2, vo.getHp());
			ps.setString(3, vo.getZipcode());
			ps.setString(4, vo.getAddress());
			ps.setString(5, vo.getAddressDetail());
			ps.setString(6, vo.getUserid());
			
			int cnt=ps.executeUpdate();
			System.out.println("회원정보 수정 결과, cnt=" + cnt
					+", 매개변수 vo="+vo);
			
			return cnt;
		}finally {
			pool.dbClose(con, ps);
		}
	}
	
	public int deleteMember(String userid) throws SQLException {
		Connection con=null;
		PreparedStatement ps=null;
		
		try {
			con=pool.getConnection();
			
			String sql="update member"
					+ " set outdate=sysdate" 
					+ " where userid=?";
			ps=con.prepareStatement(sql);
			ps.setString(1, userid);
			
			int cnt=ps.executeUpdate();
			System.out.println("회원탈퇴 결과, cnt=" + cnt
					+", 매개변수 userid="+userid);
			
			return cnt;
		}finally {
			pool.dbClose(con, ps);
		}
	}
	*/
	
}











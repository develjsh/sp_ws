package com.will.herb.member.model;

import org.mybatis.spring.SqlSessionTemplate;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

@Repository
public class MemberDAOMybatis implements MemberDAO {
	@Autowired
	private SqlSessionTemplate sqlSession;
	
	private String namespace="config.mybatis.mapper.oracle.member.";
	
	
	public int insertMember(MemberVO vo) {
		return sqlSession.insert(namespace + "memberInsert", vo);
	}
	
	public int selectDup(String userid) {
		return sqlSession.selectOne(namespace + "selectDup", userid);
	}

	@Override
	public String selectPwd(String userid) {
		return sqlSession.selectOne(namespace + "selectPwd", userid);
	}
	
	
	
	public MemberVO selectMember(String userid){
		return sqlSession.selectOne(namespace + "selectMember", userid);
	}
	/*
	public int updateMember(MemberVO vo) throws SQLException {
		Connection con=null;
		PreparedStatement ps=null;
		
		try {
			con=pool.getConnection();
			
			String sql="update member"
					+ " set email=?,hp=?, zipcode=?, "
					+ " address=?, addressDetail=?" 
					+ " where userid=?";
			ps=con.prepareStatement(sql);
			ps.setString(1, vo.getEmail());
			ps.setString(2, vo.getHp());
			ps.setString(3, vo.getZipcode());
			ps.setString(4, vo.getAddress());
			ps.setString(5, vo.getAddressDetail());
			ps.setString(6, vo.getUserid());
			
			int cnt=ps.executeUpdate();
			System.out.println("회원정보 수정 결과, cnt=" + cnt
					+", 매개변수 vo="+vo);
			
			return cnt;
		}finally {
			pool.dbClose(con, ps);
		}
	}
	
	public int deleteMember(String userid) throws SQLException {
		Connection con=null;
		PreparedStatement ps=null;
		
		try {
			con=pool.getConnection();
			
			String sql="update member"
					+ " set outdate=sysdate" 
					+ " where userid=?";
			ps=con.prepareStatement(sql);
			ps.setString(1, userid);
			
			int cnt=ps.executeUpdate();
			System.out.println("회원탈퇴 결과, cnt=" + cnt
					+", 매개변수 userid="+userid);
			
			return cnt;
		}finally {
			pool.dbClose(con, ps);
		}
	}
	*/
	
}










